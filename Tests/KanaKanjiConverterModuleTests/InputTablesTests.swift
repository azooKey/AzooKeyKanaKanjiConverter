@testable import KanaKanjiConverterModule
import XCTest

final class Roman2KanaTests: XCTestCase {
    func testToHiragana() throws {
        let table = InputStyleManager.shared.table(for: .defaultRomanToKana)
        // xtsu -> „Å£
        XCTAssertEqual(table.toHiragana(currentText: Array(""), added: .character("x")), Array("x"))
        XCTAssertEqual(table.toHiragana(currentText: Array("x"), added: .character("t")), Array("xt"))
        XCTAssertEqual(table.toHiragana(currentText: Array("xt"), added: .character("s")), Array("xts"))
        XCTAssertEqual(table.toHiragana(currentText: Array("xts"), added: .character("u")), Array("„Å£"))

        // kanto -> „Åã„Çì„Å®
        XCTAssertEqual(table.toHiragana(currentText: Array(""), added: .character("k")), Array("k"))
        XCTAssertEqual(table.toHiragana(currentText: Array("k"), added: .character("a")), Array("„Åã"))
        XCTAssertEqual(table.toHiragana(currentText: Array("„Åã"), added: .character("n")), Array("„Åãn"))
        XCTAssertEqual(table.toHiragana(currentText: Array("„Åãn"), added: .character("t")), Array("„Åã„Çìt"))
        XCTAssertEqual(table.toHiragana(currentText: Array("„Åã„Çìt"), added: .character("o")), Array("„Åã„Çì„Å®"))

        // zl -> ‚Üí
        XCTAssertEqual(table.toHiragana(currentText: Array(""), added: .character("z")), Array("z"))
        XCTAssertEqual(table.toHiragana(currentText: Array("z"), added: .character("l")), Array("‚Üí"))

        // TT -> TT
        XCTAssertEqual(table.toHiragana(currentText: Array("T"), added: .character("T")), Array("TT"))

        // n<any> -> „Çì<any>
        XCTAssertEqual(table.toHiragana(currentText: Array("n"), added: .character("„ÄÇ")), Array("„Çì„ÄÇ"))
        XCTAssertEqual(table.toHiragana(currentText: Array("n"), added: .character("+")), Array("„Çì+"))
        XCTAssertEqual(table.toHiragana(currentText: Array("n"), added: .character("N")), Array("„ÇìN"))
        XCTAssertEqual(table.toHiragana(currentText: Array("n"), added: .compositionSeparator), Array("„Çì"))

        // nyu
        XCTAssertEqual(table.toHiragana(currentText: Array("ny"), added: .character("u")), Array("„Å´„ÇÖ"))
    }

    func testAny1Cases() throws {
        let table = InputTable(pieceHiraganaChanges: [
            [.any1, .any1]: [.character("üòÑ")],
            [.piece(.character("s")), .piece(.character("s"))]: [.character("√ü")],
            [.piece(.character("a")), .piece(.character("z")), .piece(.character("z"))]: [.character("Q")],
            [.any1, .any1, .any1]: [.character("["), .any1, .character("]")],
            [.piece(.character("n")), .any1]: [.character("„Çì"), .any1]
        ])
        XCTAssertEqual(table.toHiragana(currentText: Array("a"), added: .character("b")), Array("ab"))
        XCTAssertEqual(table.toHiragana(currentText: Array("abc"), added: .character("d")), Array("abcd"))
        XCTAssertEqual(table.toHiragana(currentText: Array(""), added: .character("z")), Array("z"))
        XCTAssertEqual(table.toHiragana(currentText: Array("z"), added: .character("z")), Array("üòÑ"))
        XCTAssertEqual(table.toHiragana(currentText: Array("z"), added: .character("s")), Array("zs"))
        XCTAssertEqual(table.toHiragana(currentText: Array("s"), added: .character("s")), Array("√ü"))
        XCTAssertEqual(table.toHiragana(currentText: Array("az"), added: .character("z")), Array("Q"))
        XCTAssertEqual(table.toHiragana(currentText: Array("ss"), added: .character("s")), Array("[s]"))
        XCTAssertEqual(table.toHiragana(currentText: Array("sr"), added: .character("s")), Array("srs"))
        XCTAssertEqual(table.toHiragana(currentText: Array("n"), added: .character("t")), Array("„Çìt"))
        XCTAssertEqual(table.toHiragana(currentText: Array("n"), added: .character("n")), Array("„Çìn"))
    }

    func testKanaJIS() throws {
        let table = InputStyleManager.shared.table(for: .defaultKanaJIS)
        XCTAssertEqual(table.toHiragana(currentText: Array(""), added: .character("q")), Array("„Åü"))
        XCTAssertEqual(table.toHiragana(currentText: Array("„Åü"), added: .character("Ôº†")), Array("„Å†"))
        XCTAssertEqual(table.toHiragana(currentText: Array(""), added: .key(intention: "0", modifiers: [.shift])), Array("„Çí"))
    }
}
