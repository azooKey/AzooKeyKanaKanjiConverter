@testable import KanaKanjiConverterModule
import XCTest

final class Roman2KanaTests: XCTestCase {
    func toSurfacePieces(_ input: String) -> [SurfacePiece] {
        input.map { .character($0) }
    }

    func testToHiragana() throws {
        let table = InputStyleManager.shared.table(for: .defaultRomanToKana)
        // xtsu -> „Å£
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces(""), added: "x"), toSurfacePieces("x"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("x"), added: "t"), toSurfacePieces("xt"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("xt"), added: "s"), toSurfacePieces("xts"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("xts"), added: "u"), toSurfacePieces("„Å£"))

        // kanto -> „Åã„Çì„Å®
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces(""), added: "k"), toSurfacePieces("k"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("k"), added: "a"), toSurfacePieces("„Åã"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("„Åã"), added: "n"), toSurfacePieces("„Åãn"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("„Åãn"), added: "t"), toSurfacePieces("„Åã„Çìt"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("„Åã„Çìt"), added: "o"), toSurfacePieces("„Åã„Çì„Å®"))

        // zl -> ‚Üí
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces(""), added: "z"), toSurfacePieces("z"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("z"), added: "l"), toSurfacePieces("‚Üí"))

        // TT -> TT
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("T"), added: "T"), toSurfacePieces("TT"))

        // n<any> -> „Çì<any>
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("n"), added: "„ÄÇ"), toSurfacePieces("„Çì„ÄÇ"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("n"), added: "+"), toSurfacePieces("„Çì+"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("n"), added: "N"), toSurfacePieces("„ÇìN"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("n"), added: .compositionSeparator), toSurfacePieces("„Çì"))

        // nyu
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("ny"), added: "u"), toSurfacePieces("„Å´„ÇÖ"))
    }

    func testAny1Cases() throws {
        let table = InputTable(pieceHiraganaChanges: [
            [.any1, .any1]: [.piece(.character("üòÑ"))],
            [.piece(.character("s")), .piece(.character("s"))]: [.piece(.character("√ü"))],
            [.piece(.character("a")), .piece(.character("z")), .piece(.character("z"))]: [.piece(.character("Q"))],
            [.any1, .any1, .any1]: [.piece(.character("[")), .any1, .piece(.character("]"))],
            [.piece(.character("n")), .any1]: [.piece(.character("„Çì")), .any1]
        ])
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("a"), added: "b"), toSurfacePieces("ab"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("abc"), added: "d"), toSurfacePieces("abcd"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces(""), added: "z"), toSurfacePieces("z"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("z"), added: "z"), toSurfacePieces("üòÑ"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("z"), added: "s"), toSurfacePieces("zs"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("s"), added: "s"), toSurfacePieces("√ü"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("az"), added: "z"), toSurfacePieces("Q"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("ss"), added: "s"), toSurfacePieces("[s]"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("sr"), added: "s"), toSurfacePieces("srs"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("n"), added: "t"), toSurfacePieces("„Çìt"))
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("n"), added: "n"), toSurfacePieces("„Çìn"))
    }

    func testToggleInputMock() throws {
        let table = InputTable(pieceHiraganaChanges: [
            [.piece("„ÅÇ")]: [.piece("„ÅÇ")],
            [.piece("„ÅÇ"), .piece("„ÅÇ")]: [.piece("„ÅÑ")],
            [.piece("„ÅÑ"), .piece("„ÅÇ")]: [.piece("„ÅÜ")],
            // compositionSeparator„ÅåÂÖ•„Å£„Åü„Çâ„ÄÅ„Åù„Åì„ÅßÂå∫Âàá„Çä„ÇíÂàá„Çã
            [.any1, .piece(.compositionSeparator)]: [.any1, .piece(.surfaceSeparator)],
            // @„ÇíÂ∑ª„ÅçÊàª„ÅóË®òÂè∑„Å®ËÄÉ„Åà„ÇãÂ†¥Âêà
        ])
        XCTAssertEqual(table.updateSurface(current: toSurfacePieces("„ÅÇ"), added: "„ÅÇ"), toSurfacePieces("„ÅÑ"))
        XCTAssertEqual(table.updateSurface(current: ["„ÅÇ", .surfaceSeparator], added: "„ÅÇ"), ["„ÅÇ", .surfaceSeparator, "„ÅÇ"])
    }
}
